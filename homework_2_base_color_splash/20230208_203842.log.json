{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.26.0+31c8495", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='checkpoints/resnet50_8xb32_in1k_20210831-ea4938fc.pth')\n    ),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/train/annotation_coco.json',\n        img_prefix='data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val/annotation_coco.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val/annotation_coco.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=48)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = 'work/ballon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1876744511, "exp_name": "mask_rcnn_r50_fpn_2x_coco.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.225, "bbox_mAP_50": 0.376, "bbox_mAP_75": 0.271, "bbox_mAP_s": 0.014, "bbox_mAP_m": 0.394, "bbox_mAP_l": 0.24, "bbox_mAP_copypaste": "0.225 0.376 0.271 0.014 0.394 0.240", "segm_mAP": 0.282, "segm_mAP_50": 0.377, "segm_mAP_75": 0.348, "segm_mAP_s": 0.007, "segm_mAP_m": 0.238, "segm_mAP_l": 0.316, "segm_mAP_copypaste": "0.282 0.377 0.348 0.007 0.238 0.316"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.527, "bbox_mAP_50": 0.703, "bbox_mAP_75": 0.682, "bbox_mAP_s": 0.05, "bbox_mAP_m": 0.395, "bbox_mAP_l": 0.599, "bbox_mAP_copypaste": "0.527 0.703 0.682 0.050 0.395 0.599", "segm_mAP": 0.628, "segm_mAP_50": 0.703, "segm_mAP_75": 0.703, "segm_mAP_s": 0.04, "segm_mAP_m": 0.38, "segm_mAP_l": 0.727, "segm_mAP_copypaste": "0.628 0.703 0.703 0.040 0.380 0.727"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.649, "bbox_mAP_50": 0.803, "bbox_mAP_75": 0.769, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.534, "bbox_mAP_l": 0.715, "bbox_mAP_copypaste": "0.649 0.803 0.769 0.000 0.534 0.715", "segm_mAP": 0.715, "segm_mAP_50": 0.803, "segm_mAP_75": 0.79, "segm_mAP_s": 0.0, "segm_mAP_m": 0.477, "segm_mAP_l": 0.81, "segm_mAP_copypaste": "0.715 0.803 0.790 0.000 0.477 0.810"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.666, "bbox_mAP_50": 0.827, "bbox_mAP_75": 0.775, "bbox_mAP_s": 0.454, "bbox_mAP_m": 0.618, "bbox_mAP_l": 0.703, "bbox_mAP_copypaste": "0.666 0.827 0.775 0.454 0.618 0.703", "segm_mAP": 0.73, "segm_mAP_50": 0.827, "segm_mAP_75": 0.827, "segm_mAP_s": 0.202, "segm_mAP_m": 0.637, "segm_mAP_l": 0.781, "segm_mAP_copypaste": "0.730 0.827 0.827 0.202 0.637 0.781"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.668, "bbox_mAP_50": 0.828, "bbox_mAP_75": 0.811, "bbox_mAP_s": 0.303, "bbox_mAP_m": 0.461, "bbox_mAP_l": 0.73, "bbox_mAP_copypaste": "0.668 0.828 0.811 0.303 0.461 0.730", "segm_mAP": 0.729, "segm_mAP_50": 0.828, "segm_mAP_75": 0.828, "segm_mAP_s": 0.353, "segm_mAP_m": 0.476, "segm_mAP_l": 0.801, "segm_mAP_copypaste": "0.729 0.828 0.828 0.353 0.476 0.801"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.596, "bbox_mAP_50": 0.848, "bbox_mAP_75": 0.759, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.505, "bbox_mAP_l": 0.628, "bbox_mAP_copypaste": "0.596 0.848 0.759 0.252 0.505 0.628", "segm_mAP": 0.718, "segm_mAP_50": 0.848, "segm_mAP_75": 0.835, "segm_mAP_s": 0.084, "segm_mAP_m": 0.532, "segm_mAP_l": 0.779, "segm_mAP_copypaste": "0.718 0.848 0.835 0.084 0.532 0.779"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.651, "bbox_mAP_50": 0.824, "bbox_mAP_75": 0.785, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.445, "bbox_mAP_l": 0.724, "bbox_mAP_copypaste": "0.651 0.824 0.785 0.252 0.445 0.724", "segm_mAP": 0.737, "segm_mAP_50": 0.824, "segm_mAP_75": 0.824, "segm_mAP_s": 0.202, "segm_mAP_m": 0.47, "segm_mAP_l": 0.826, "segm_mAP_copypaste": "0.737 0.824 0.824 0.202 0.470 0.826"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.703, "bbox_mAP_50": 0.857, "bbox_mAP_75": 0.826, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.574, "bbox_mAP_l": 0.751, "bbox_mAP_copypaste": "0.703 0.857 0.826 0.252 0.574 0.751", "segm_mAP": 0.77, "segm_mAP_50": 0.857, "segm_mAP_75": 0.857, "segm_mAP_s": 0.353, "segm_mAP_m": 0.581, "segm_mAP_l": 0.828, "segm_mAP_copypaste": "0.770 0.857 0.857 0.353 0.581 0.828"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.01113, "bbox_mAP": 0.619, "bbox_mAP_50": 0.799, "bbox_mAP_75": 0.764, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.436, "bbox_mAP_l": 0.686, "bbox_mAP_copypaste": "0.619 0.799 0.764 0.252 0.436 0.686", "segm_mAP": 0.699, "segm_mAP_50": 0.784, "segm_mAP_75": 0.784, "segm_mAP_s": 0.353, "segm_mAP_m": 0.436, "segm_mAP_l": 0.784, "segm_mAP_copypaste": "0.699 0.784 0.784 0.353 0.436 0.784"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.01237, "bbox_mAP": 0.648, "bbox_mAP_50": 0.808, "bbox_mAP_75": 0.808, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.491, "bbox_mAP_l": 0.727, "bbox_mAP_copypaste": "0.648 0.808 0.808 0.000 0.491 0.727", "segm_mAP": 0.706, "segm_mAP_50": 0.808, "segm_mAP_75": 0.766, "segm_mAP_s": 0.0, "segm_mAP_m": 0.495, "segm_mAP_l": 0.799, "segm_mAP_copypaste": "0.706 0.808 0.766 0.000 0.495 0.799"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.01361, "bbox_mAP": 0.576, "bbox_mAP_50": 0.759, "bbox_mAP_75": 0.673, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.51, "bbox_mAP_l": 0.646, "bbox_mAP_copypaste": "0.576 0.759 0.673 0.000 0.510 0.646", "segm_mAP": 0.631, "segm_mAP_50": 0.759, "segm_mAP_75": 0.713, "segm_mAP_s": 0.0, "segm_mAP_m": 0.427, "segm_mAP_l": 0.726, "segm_mAP_copypaste": "0.631 0.759 0.713 0.000 0.427 0.726"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.01485, "bbox_mAP": 0.555, "bbox_mAP_50": 0.794, "bbox_mAP_75": 0.639, "bbox_mAP_s": 0.151, "bbox_mAP_m": 0.292, "bbox_mAP_l": 0.648, "bbox_mAP_copypaste": "0.555 0.794 0.639 0.151 0.292 0.648", "segm_mAP": 0.675, "segm_mAP_50": 0.785, "segm_mAP_75": 0.735, "segm_mAP_s": 0.202, "segm_mAP_m": 0.343, "segm_mAP_l": 0.782, "segm_mAP_copypaste": "0.675 0.785 0.735 0.202 0.343 0.782"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.01608, "bbox_mAP": 0.535, "bbox_mAP_50": 0.775, "bbox_mAP_75": 0.659, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.256, "bbox_mAP_l": 0.636, "bbox_mAP_copypaste": "0.535 0.775 0.659 0.000 0.256 0.636", "segm_mAP": 0.607, "segm_mAP_50": 0.785, "segm_mAP_75": 0.646, "segm_mAP_s": 0.038, "segm_mAP_m": 0.273, "segm_mAP_l": 0.722, "segm_mAP_copypaste": "0.607 0.785 0.646 0.038 0.273 0.722"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.01732, "bbox_mAP": 0.564, "bbox_mAP_50": 0.783, "bbox_mAP_75": 0.689, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.298, "bbox_mAP_l": 0.669, "bbox_mAP_copypaste": "0.564 0.783 0.689 0.000 0.298 0.669", "segm_mAP": 0.643, "segm_mAP_50": 0.783, "segm_mAP_75": 0.757, "segm_mAP_s": 0.0, "segm_mAP_m": 0.346, "segm_mAP_l": 0.753, "segm_mAP_copypaste": "0.643 0.783 0.757 0.000 0.346 0.753"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.01856, "bbox_mAP": 0.591, "bbox_mAP_50": 0.737, "bbox_mAP_75": 0.694, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.369, "bbox_mAP_l": 0.675, "bbox_mAP_copypaste": "0.591 0.737 0.694 0.000 0.369 0.675", "segm_mAP": 0.626, "segm_mAP_50": 0.722, "segm_mAP_75": 0.716, "segm_mAP_s": 0.0, "segm_mAP_m": 0.37, "segm_mAP_l": 0.729, "segm_mAP_copypaste": "0.626 0.722 0.716 0.000 0.370 0.729"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.0198, "bbox_mAP": 0.604, "bbox_mAP_50": 0.807, "bbox_mAP_75": 0.747, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.418, "bbox_mAP_l": 0.691, "bbox_mAP_copypaste": "0.604 0.807 0.747 0.000 0.418 0.691", "segm_mAP": 0.674, "segm_mAP_50": 0.79, "segm_mAP_75": 0.73, "segm_mAP_s": 0.0, "segm_mAP_m": 0.361, "segm_mAP_l": 0.798, "segm_mAP_copypaste": "0.674 0.790 0.730 0.000 0.361 0.798"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.002, "bbox_mAP": 0.601, "bbox_mAP_50": 0.766, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.36, "bbox_mAP_l": 0.707, "bbox_mAP_copypaste": "0.601 0.766 0.686 0.000 0.360 0.707", "segm_mAP": 0.658, "segm_mAP_50": 0.748, "segm_mAP_75": 0.724, "segm_mAP_s": 0.0, "segm_mAP_m": 0.316, "segm_mAP_l": 0.781, "segm_mAP_copypaste": "0.658 0.748 0.724 0.000 0.316 0.781"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.002, "bbox_mAP": 0.64, "bbox_mAP_50": 0.767, "bbox_mAP_75": 0.714, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.337, "bbox_mAP_l": 0.762, "bbox_mAP_copypaste": "0.640 0.767 0.714 0.000 0.337 0.762", "segm_mAP": 0.667, "segm_mAP_50": 0.755, "segm_mAP_75": 0.714, "segm_mAP_s": 0.0, "segm_mAP_m": 0.291, "segm_mAP_l": 0.799, "segm_mAP_copypaste": "0.667 0.755 0.714 0.000 0.291 0.799"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.002, "bbox_mAP": 0.652, "bbox_mAP_50": 0.769, "bbox_mAP_75": 0.73, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.396, "bbox_mAP_l": 0.77, "bbox_mAP_copypaste": "0.652 0.769 0.730 0.000 0.396 0.770", "segm_mAP": 0.673, "segm_mAP_50": 0.761, "segm_mAP_75": 0.73, "segm_mAP_s": 0.0, "segm_mAP_m": 0.312, "segm_mAP_l": 0.806, "segm_mAP_copypaste": "0.673 0.761 0.730 0.000 0.312 0.806"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.002, "bbox_mAP": 0.644, "bbox_mAP_50": 0.758, "bbox_mAP_75": 0.696, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.336, "bbox_mAP_l": 0.775, "bbox_mAP_copypaste": "0.644 0.758 0.696 0.000 0.336 0.775", "segm_mAP": 0.661, "segm_mAP_50": 0.764, "segm_mAP_75": 0.711, "segm_mAP_s": 0.0, "segm_mAP_m": 0.277, "segm_mAP_l": 0.801, "segm_mAP_copypaste": "0.661 0.764 0.711 0.000 0.277 0.801"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.002, "bbox_mAP": 0.659, "bbox_mAP_50": 0.771, "bbox_mAP_75": 0.733, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.377, "bbox_mAP_l": 0.79, "bbox_mAP_copypaste": "0.659 0.771 0.733 0.000 0.377 0.790", "segm_mAP": 0.682, "segm_mAP_50": 0.771, "segm_mAP_75": 0.736, "segm_mAP_s": 0.0, "segm_mAP_m": 0.346, "segm_mAP_l": 0.81, "segm_mAP_copypaste": "0.682 0.771 0.736 0.000 0.346 0.810"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.002, "bbox_mAP": 0.631, "bbox_mAP_50": 0.764, "bbox_mAP_75": 0.697, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.397, "bbox_mAP_l": 0.737, "bbox_mAP_copypaste": "0.631 0.764 0.697 0.000 0.397 0.737", "segm_mAP": 0.665, "segm_mAP_50": 0.764, "segm_mAP_75": 0.718, "segm_mAP_s": 0.0, "segm_mAP_m": 0.348, "segm_mAP_l": 0.784, "segm_mAP_copypaste": "0.665 0.764 0.718 0.000 0.348 0.784"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.628, "bbox_mAP_50": 0.754, "bbox_mAP_75": 0.688, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.35, "bbox_mAP_l": 0.751, "bbox_mAP_copypaste": "0.628 0.754 0.688 0.000 0.350 0.751", "segm_mAP": 0.659, "segm_mAP_50": 0.754, "segm_mAP_75": 0.708, "segm_mAP_s": 0.0, "segm_mAP_m": 0.309, "segm_mAP_l": 0.791, "segm_mAP_copypaste": "0.659 0.754 0.708 0.000 0.309 0.791"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.626, "bbox_mAP_50": 0.748, "bbox_mAP_75": 0.683, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.336, "bbox_mAP_l": 0.748, "bbox_mAP_copypaste": "0.626 0.748 0.683 0.000 0.336 0.748", "segm_mAP": 0.651, "segm_mAP_50": 0.748, "segm_mAP_75": 0.703, "segm_mAP_s": 0.0, "segm_mAP_m": 0.307, "segm_mAP_l": 0.78, "segm_mAP_copypaste": "0.651 0.748 0.703 0.000 0.307 0.780"}
{"mode": "val", "epoch": 25, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.63, "bbox_mAP_50": 0.75, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.751, "bbox_mAP_copypaste": "0.630 0.750 0.685 0.000 0.362 0.751", "segm_mAP": 0.653, "segm_mAP_50": 0.75, "segm_mAP_75": 0.705, "segm_mAP_s": 0.0, "segm_mAP_m": 0.314, "segm_mAP_l": 0.781, "segm_mAP_copypaste": "0.653 0.750 0.705 0.000 0.314 0.781"}
{"mode": "val", "epoch": 26, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.626, "bbox_mAP_50": 0.749, "bbox_mAP_75": 0.684, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.746, "bbox_mAP_copypaste": "0.626 0.749 0.684 0.000 0.362 0.746", "segm_mAP": 0.651, "segm_mAP_50": 0.749, "segm_mAP_75": 0.704, "segm_mAP_s": 0.0, "segm_mAP_m": 0.314, "segm_mAP_l": 0.78, "segm_mAP_copypaste": "0.651 0.749 0.704 0.000 0.314 0.780"}
{"mode": "val", "epoch": 27, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.637, "bbox_mAP_50": 0.763, "bbox_mAP_75": 0.683, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.381, "bbox_mAP_l": 0.75, "bbox_mAP_copypaste": "0.637 0.763 0.683 0.000 0.381 0.750", "segm_mAP": 0.663, "segm_mAP_50": 0.763, "segm_mAP_75": 0.718, "segm_mAP_s": 0.0, "segm_mAP_m": 0.346, "segm_mAP_l": 0.78, "segm_mAP_copypaste": "0.663 0.763 0.718 0.000 0.346 0.780"}
{"mode": "val", "epoch": 28, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.63, "bbox_mAP_50": 0.748, "bbox_mAP_75": 0.683, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.347, "bbox_mAP_l": 0.752, "bbox_mAP_copypaste": "0.630 0.748 0.683 0.000 0.347 0.752", "segm_mAP": 0.653, "segm_mAP_50": 0.748, "segm_mAP_75": 0.703, "segm_mAP_s": 0.0, "segm_mAP_m": 0.307, "segm_mAP_l": 0.783, "segm_mAP_copypaste": "0.653 0.748 0.703 0.000 0.307 0.783"}
{"mode": "val", "epoch": 29, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.638, "bbox_mAP_50": 0.766, "bbox_mAP_75": 0.684, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.395, "bbox_mAP_l": 0.752, "bbox_mAP_copypaste": "0.638 0.766 0.684 0.000 0.395 0.752", "segm_mAP": 0.666, "segm_mAP_50": 0.766, "segm_mAP_75": 0.719, "segm_mAP_s": 0.0, "segm_mAP_m": 0.349, "segm_mAP_l": 0.785, "segm_mAP_copypaste": "0.666 0.766 0.719 0.000 0.349 0.785"}
{"mode": "val", "epoch": 30, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.641, "bbox_mAP_50": 0.767, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.395, "bbox_mAP_l": 0.754, "bbox_mAP_copypaste": "0.641 0.767 0.685 0.000 0.395 0.754", "segm_mAP": 0.663, "segm_mAP_50": 0.767, "segm_mAP_75": 0.72, "segm_mAP_s": 0.0, "segm_mAP_m": 0.347, "segm_mAP_l": 0.78, "segm_mAP_copypaste": "0.663 0.767 0.720 0.000 0.347 0.780"}
{"mode": "val", "epoch": 31, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.641, "bbox_mAP_50": 0.767, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.395, "bbox_mAP_l": 0.754, "bbox_mAP_copypaste": "0.641 0.767 0.685 0.000 0.395 0.754", "segm_mAP": 0.669, "segm_mAP_50": 0.767, "segm_mAP_75": 0.72, "segm_mAP_s": 0.0, "segm_mAP_m": 0.355, "segm_mAP_l": 0.786, "segm_mAP_copypaste": "0.669 0.767 0.720 0.000 0.355 0.786"}
{"mode": "val", "epoch": 32, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.64, "bbox_mAP_50": 0.768, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.383, "bbox_mAP_l": 0.755, "bbox_mAP_copypaste": "0.640 0.768 0.686 0.000 0.383 0.755", "segm_mAP": 0.67, "segm_mAP_50": 0.768, "segm_mAP_75": 0.721, "segm_mAP_s": 0.0, "segm_mAP_m": 0.349, "segm_mAP_l": 0.788, "segm_mAP_copypaste": "0.670 0.768 0.721 0.000 0.349 0.788"}
{"mode": "val", "epoch": 33, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.645, "bbox_mAP_50": 0.767, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.395, "bbox_mAP_l": 0.76, "bbox_mAP_copypaste": "0.645 0.767 0.685 0.000 0.395 0.760", "segm_mAP": 0.669, "segm_mAP_50": 0.767, "segm_mAP_75": 0.72, "segm_mAP_s": 0.0, "segm_mAP_m": 0.355, "segm_mAP_l": 0.786, "segm_mAP_copypaste": "0.669 0.767 0.720 0.000 0.355 0.786"}
{"mode": "val", "epoch": 34, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.637, "bbox_mAP_50": 0.768, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.383, "bbox_mAP_l": 0.752, "bbox_mAP_copypaste": "0.637 0.768 0.685 0.000 0.383 0.752", "segm_mAP": 0.671, "segm_mAP_50": 0.768, "segm_mAP_75": 0.721, "segm_mAP_s": 0.0, "segm_mAP_m": 0.355, "segm_mAP_l": 0.787, "segm_mAP_copypaste": "0.671 0.768 0.721 0.000 0.355 0.787"}
{"mode": "val", "epoch": 35, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.645, "bbox_mAP_50": 0.768, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.383, "bbox_mAP_l": 0.763, "bbox_mAP_copypaste": "0.645 0.768 0.686 0.000 0.383 0.763", "segm_mAP": 0.672, "segm_mAP_50": 0.768, "segm_mAP_75": 0.721, "segm_mAP_s": 0.0, "segm_mAP_m": 0.355, "segm_mAP_l": 0.789, "segm_mAP_copypaste": "0.672 0.768 0.721 0.000 0.355 0.789"}
{"mode": "val", "epoch": 36, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.632, "bbox_mAP_50": 0.752, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.35, "bbox_mAP_l": 0.756, "bbox_mAP_copypaste": "0.632 0.752 0.686 0.000 0.350 0.756", "segm_mAP": 0.659, "segm_mAP_50": 0.752, "segm_mAP_75": 0.706, "segm_mAP_s": 0.0, "segm_mAP_m": 0.316, "segm_mAP_l": 0.788, "segm_mAP_copypaste": "0.659 0.752 0.706 0.000 0.316 0.788"}
{"mode": "val", "epoch": 37, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.633, "bbox_mAP_50": 0.753, "bbox_mAP_75": 0.687, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.755, "bbox_mAP_copypaste": "0.633 0.753 0.687 0.000 0.362 0.755", "segm_mAP": 0.658, "segm_mAP_50": 0.753, "segm_mAP_75": 0.706, "segm_mAP_s": 0.0, "segm_mAP_m": 0.31, "segm_mAP_l": 0.79, "segm_mAP_copypaste": "0.658 0.753 0.706 0.000 0.310 0.790"}
{"mode": "val", "epoch": 38, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.636, "bbox_mAP_50": 0.753, "bbox_mAP_75": 0.687, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.35, "bbox_mAP_l": 0.76, "bbox_mAP_copypaste": "0.636 0.753 0.687 0.000 0.350 0.760", "segm_mAP": 0.66, "segm_mAP_50": 0.753, "segm_mAP_75": 0.706, "segm_mAP_s": 0.0, "segm_mAP_m": 0.316, "segm_mAP_l": 0.79, "segm_mAP_copypaste": "0.660 0.753 0.706 0.000 0.316 0.790"}
{"mode": "val", "epoch": 39, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.632, "bbox_mAP_50": 0.752, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.35, "bbox_mAP_l": 0.756, "bbox_mAP_copypaste": "0.632 0.752 0.686 0.000 0.350 0.756", "segm_mAP": 0.661, "segm_mAP_50": 0.752, "segm_mAP_75": 0.706, "segm_mAP_s": 0.0, "segm_mAP_m": 0.31, "segm_mAP_l": 0.794, "segm_mAP_copypaste": "0.661 0.752 0.706 0.000 0.310 0.794"}
{"mode": "val", "epoch": 40, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.635, "bbox_mAP_50": 0.752, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.757, "bbox_mAP_copypaste": "0.635 0.752 0.686 0.000 0.362 0.757", "segm_mAP": 0.663, "segm_mAP_50": 0.752, "segm_mAP_75": 0.706, "segm_mAP_s": 0.0, "segm_mAP_m": 0.316, "segm_mAP_l": 0.794, "segm_mAP_copypaste": "0.663 0.752 0.706 0.000 0.316 0.794"}
{"mode": "val", "epoch": 41, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.634, "bbox_mAP_50": 0.751, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.347, "bbox_mAP_l": 0.757, "bbox_mAP_copypaste": "0.634 0.751 0.686 0.000 0.347 0.757", "segm_mAP": 0.663, "segm_mAP_50": 0.751, "segm_mAP_75": 0.706, "segm_mAP_s": 0.0, "segm_mAP_m": 0.309, "segm_mAP_l": 0.795, "segm_mAP_copypaste": "0.663 0.751 0.706 0.000 0.309 0.795"}
{"mode": "val", "epoch": 42, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.626, "bbox_mAP_50": 0.73, "bbox_mAP_75": 0.686, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.745, "bbox_mAP_copypaste": "0.626 0.730 0.686 0.000 0.362 0.745", "segm_mAP": 0.648, "segm_mAP_50": 0.752, "segm_mAP_75": 0.686, "segm_mAP_s": 0.0, "segm_mAP_m": 0.303, "segm_mAP_l": 0.777, "segm_mAP_copypaste": "0.648 0.752 0.686 0.000 0.303 0.777"}
{"mode": "val", "epoch": 43, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.635, "bbox_mAP_50": 0.751, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.758, "bbox_mAP_copypaste": "0.635 0.751 0.685 0.000 0.362 0.758", "segm_mAP": 0.662, "segm_mAP_50": 0.751, "segm_mAP_75": 0.705, "segm_mAP_s": 0.0, "segm_mAP_m": 0.316, "segm_mAP_l": 0.792, "segm_mAP_copypaste": "0.662 0.751 0.705 0.000 0.316 0.792"}
{"mode": "val", "epoch": 44, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.644, "bbox_mAP_50": 0.75, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.769, "bbox_mAP_copypaste": "0.644 0.750 0.685 0.000 0.362 0.769", "segm_mAP": 0.661, "segm_mAP_50": 0.75, "segm_mAP_75": 0.704, "segm_mAP_s": 0.0, "segm_mAP_m": 0.316, "segm_mAP_l": 0.792, "segm_mAP_copypaste": "0.661 0.750 0.704 0.000 0.316 0.792"}
{"mode": "val", "epoch": 45, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.64, "bbox_mAP_50": 0.75, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.764, "bbox_mAP_copypaste": "0.640 0.750 0.685 0.000 0.362 0.764", "segm_mAP": 0.66, "segm_mAP_50": 0.75, "segm_mAP_75": 0.704, "segm_mAP_s": 0.0, "segm_mAP_m": 0.31, "segm_mAP_l": 0.792, "segm_mAP_copypaste": "0.660 0.750 0.704 0.000 0.310 0.792"}
{"mode": "val", "epoch": 46, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.638, "bbox_mAP_50": 0.75, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.762, "bbox_mAP_copypaste": "0.638 0.750 0.685 0.000 0.362 0.762", "segm_mAP": 0.661, "segm_mAP_50": 0.75, "segm_mAP_75": 0.704, "segm_mAP_s": 0.0, "segm_mAP_m": 0.316, "segm_mAP_l": 0.792, "segm_mAP_copypaste": "0.661 0.750 0.704 0.000 0.316 0.792"}
{"mode": "val", "epoch": 47, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.627, "bbox_mAP_50": 0.728, "bbox_mAP_75": 0.684, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.36, "bbox_mAP_l": 0.749, "bbox_mAP_copypaste": "0.627 0.728 0.684 0.000 0.360 0.749", "segm_mAP": 0.649, "segm_mAP_50": 0.75, "segm_mAP_75": 0.684, "segm_mAP_s": 0.0, "segm_mAP_m": 0.29, "segm_mAP_l": 0.777, "segm_mAP_copypaste": "0.649 0.750 0.684 0.000 0.290 0.777"}
{"mode": "val", "epoch": 48, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.635, "bbox_mAP_50": 0.75, "bbox_mAP_75": 0.685, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.362, "bbox_mAP_l": 0.757, "bbox_mAP_copypaste": "0.635 0.750 0.685 0.000 0.362 0.757", "segm_mAP": 0.659, "segm_mAP_50": 0.75, "segm_mAP_75": 0.704, "segm_mAP_s": 0.0, "segm_mAP_m": 0.31, "segm_mAP_l": 0.791, "segm_mAP_copypaste": "0.659 0.750 0.704 0.000 0.310 0.791"}
